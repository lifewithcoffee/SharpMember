// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharpMember.Core.Data;

#nullable disable

namespace SharpMember.Migrations.Postgres.Migrations.TaskDb
{
    [DbContext(typeof(TaskDbContext))]
    partial class TaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("task")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.CheckListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("CheckListItems", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("TaskComments", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("integer");

                    b.Property<bool>("Pinned")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkTasks", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskLabel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("TaskLabels", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.WorkTaskLabelRelation", b =>
                {
                    b.Property<int>("WorkTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskLabelId")
                        .HasColumnType("integer");

                    b.Property<string>("TaskLabelName")
                        .HasColumnType("text");

                    b.HasKey("WorkTaskId", "TaskLabelId");

                    b.HasIndex("TaskLabelName");

                    b.ToTable("WorkTaskLabelRelations", "task");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.CheckListItem", b =>
                {
                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.TaskItem", "WorkTask")
                        .WithMany("CheckListItems")
                        .HasForeignKey("WorkTaskId");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.Milestone", b =>
                {
                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskComment", b =>
                {
                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.TaskItem", "WorkTask")
                        .WithMany("Comments")
                        .HasForeignKey("WorkTaskId");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskItem", b =>
                {
                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.Milestone", "Milestone")
                        .WithMany("WorkTasks")
                        .HasForeignKey("MilestoneId");

                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.Project", "Project")
                        .WithMany("WorkTasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.WorkTaskLabelRelation", b =>
                {
                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.TaskLabel", "TaskLabel")
                        .WithMany("WorkTaskLabelRelations")
                        .HasForeignKey("TaskLabelName");

                    b.HasOne("SharpMember.Core.Data.Models.TaskSystem.TaskItem", "WorkTask")
                        .WithMany("WorkTaskLabelRelations")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskLabel");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.Milestone", b =>
                {
                    b.Navigation("WorkTasks");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.Project", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("WorkTasks");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskItem", b =>
                {
                    b.Navigation("CheckListItems");

                    b.Navigation("Comments");

                    b.Navigation("WorkTaskLabelRelations");
                });

            modelBuilder.Entity("SharpMember.Core.Data.Models.TaskSystem.TaskLabel", b =>
                {
                    b.Navigation("WorkTaskLabelRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
